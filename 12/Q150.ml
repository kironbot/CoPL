|- let rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1) in let x = ref 0 in let sum = fun i -> x := !x + i in let y = do sum 3 in !x evalto 6 / @l = 6
by E-LetRec {
    do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] |- let x = ref 0 in let sum = fun i -> x := !x + i in let y = do sum 3 in !x evalto 6 / @l = 6 by E-Let {
        do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] |- ref 0 evalto @l / @l = 0 by E-Ref {
            do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] |- 0 evalto 0 by E-Int {};
        };
        @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l |- let sum = fun i -> x := !x + i in let y = do sum 3 in !x evalto 6 / @l = 6 by E-Let {
            @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l |- fun i -> x := !x + i evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] / @l = 0 by E-Fun {};
            @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, sum = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- let y = do sum 3 in !x evalto 6 / @l = 6 by E-Let {
                @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, sum = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- do sum 3 evalto 0 / @l = 6 by E-App {
                    @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, sum = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- do sum evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i])[fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 0 by E-AppRec {
                        @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, sum = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- do evalto ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 0 by E-Var {};
                        @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, sum = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- sum evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] / @l = 0 by E-Var {};
                        @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- fun i -> if i < 1 then 0 else let x = f i in do f (i - 1) evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i])[fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 0 by E-Fun {};
                    };
                    @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, sum = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- 3 evalto 3 / @l = 0 by E-Int {};
                    @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3 |- if i < 1 then 0 else let x = f i in do f (i - 1) evalto 0 / @l = 6 by E-IfF {
                        @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3 |- i < 1 evalto false / @l = 0 by E-Lt {
                            @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3 |- i evalto 3 / @l = 0 by E-Var {};
                            @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3 |- 1 evalto 1 / @l = 0 by E-Int {};
                            3 less than 1 is false by B-Lt {};
                        };
                        @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3 |- let x = f i in do f (i - 1) evalto 0 / @l = 6 by E-Let {
                            @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3 |- f i evalto 3/ @l = 3 by E-App {
                                @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3 |- f evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] / @l = 0 by E-Var {};
                                @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3 |- i evalto 3 / @l = 0 by E-Var {};
                                @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 3 |- x := !x + i evalto 3 / @l = 3 by E-Assign {
                                    @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 3 |- x evalto @l / @l = 0 by E-Var {};
                                    @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 3 |- !x + i evalto 3 / @l = 0 by E-Plus {
                                        @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 3 |- !x evalto 0 / @l = 0 by E-Deref {
                                            @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 3 |- x evalto @l / @l = 0 by E-Var {};
                                        };
                                        @l = 0 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 3 |- i evalto 3 / @l = 0 by E-Var {};
                                        0 plus 3 is 3 by B-Plus {};
                                    };
                                };
                            };
                            @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3, x = 3 |- do f (i - 1) evalto 0 / @l = 6 by E-App {
                                @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3, x = 3 |- do f evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i])[fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 3 by E-AppRec {
                                    @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3, x = 3 |- do evalto ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 3 by E-Var {};
                                    @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3, x = 3 |- f evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] / @l = 3 by E-Var {};
                                    @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- fun i -> if i < 1 then 0 else let x = f i in do f (i - 1) evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i])[fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 3 by E-Fun {};
                                };
                                @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3, x = 3 |- i - 1 evalto 2 / @l = 3 by E-Minus {
                                    @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3, x = 3 |- i evalto 3 / @l = 3 by E-Var {};
                                    @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 3, x = 3 |- 1 evalto 1 / @l = 3 by E-Int {};
                                    3 minus 1 is 2 by B-Minus {};
                                };
                                @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2 |- if i < 1 then 0 else let x = f i in do f (i - 1) evalto 0 / @l = 6 by E-IfF {
                                    @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2 |- i < 1 evalto false / @l = 3 by E-Lt {
                                        @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2 |- i evalto 2 / @l = 3 by E-Var {};
                                        @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2 |- 1 evalto 1 / @l = 3 by E-Int {};
                                        2 less than 1 is false by B-Lt {};
                                    };
                                    @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2 |- let x = f i in do f (i - 1) evalto 0 / @l = 6 by E-Let {
                                        @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2 |- f i evalto 5 / @l = 5 by E-App {
                                            @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2 |- f evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] / @l = 3 by E-Var {};
                                            @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2 |- i evalto 2 / @l = 3 by E-Var {};
                                            @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 2 |- x := !x + i evalto 5 / @l = 5 by E-Assign {
                                                @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 2 |- x evalto @l / @l = 3 by E-Var {};
                                                @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 2 |- !x + i evalto 5 / @l = 3 by E-Plus {
                                                    @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 2 |- !x evalto 3 / @l = 3 by E-Deref {
                                                        @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 2 |- x evalto @l / @l = 3 by E-Var {};
                                                    };
                                                    @l = 3 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 2 |- i evalto 2 / @l = 3 by E-Var {};
                                                    3 plus 2 is 5 by B-Plus {};
                                                };
                                            };
                                        };
                                        @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2, x = 5 |- do f (i - 1) evalto 0 / @l = 6 by E-App {
                                            @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2, x = 5 |- do f evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i])[fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 5 by E-AppRec {
                                                @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2, x = 5 |- do evalto ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 5 by E-Var {};
                                                @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2, x = 5 |- f evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] / @l = 5 by E-Var {};
                                                @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- fun i -> if i < 1 then 0 else let x = f i in do f (i - 1) evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i])[fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 5 by E-Fun {};
                                            };
                                            @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2, x = 5 |- (i - 1) evalto 1 / @l = 5 by E-Minus {
                                                @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2, x = 5 |- i evalto 2 / @l = 5 by E-Var {};
                                                @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 2, x = 5 |- 1 evalto 1 / @l = 5 by E-Int {};
                                                2 minus 1 is 1 by B-Minus {};
                                            };
                                            @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1 |- if i < 1 then 0 else let x = f i in do f (i - 1) evalto 0 / @l = 6 by E-IfF {
                                                @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1 |- i < 1 evalto false / @l = 5 by E-Lt {
                                                    @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1 |- i evalto 1 / @l = 5 by E-Var {};
                                                    @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1 |- 1 evalto 1 / @l = 5 by E-Int {};
                                                    1 less than 1 is false by B-Lt {};
                                                };
                                                @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1 |- let x = f i in do f (i - 1) evalto 0 / @l = 6 by E-Let {
                                                    @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1 |- f i evalto 6 / @l = 6 by E-App {
                                                        @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1 |- f evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] / @l = 5 by E-Var {};
                                                        @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1 |- i evalto 1 / @l = 5 by E-Var {};
                                                        @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 1 |- x := !x + i evalto 6 / @l = 6 by E-Assign {
                                                            @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 1 |- x evalto @l / @l = 5 by E-Var {};
                                                            @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 1 |- !x + i evalto 6 / @l = 5 by E-Plus {
                                                                @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 1 |- !x evalto 5 / @l = 5 by E-Deref {
                                                                    @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 1 |- x evalto @l / @l = 5 by E-Var {};
                                                                };
                                                                @l = 5 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, i = 1 |- i evalto 1 / @l = 5 by E-Var {};
                                                                5 plus 1 is 6 by B-Plus {};
                                                            };
                                                        };
                                                    };
                                                    @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1, x = 6 |- do f (i - 1) evalto 0 / @l = 6 by E-App {
                                                        @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1, x = 6 |- do f evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i])[fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 6 by E-AppRec {
                                                            @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1, x = 6 |- do evalto ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 6 by E-Var {};
                                                            @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1, x = 6 |- f evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] / @l = 6 by E-Var {};
                                                            @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i] |- fun i -> if i < 1 then 0 else let x = f i in do f (i - 1) evalto (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i])[fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)] / @l = 6 by E-Fun {};
                                                        };
                                                        @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1, x = 6 |- (i - 1) evalto 0 / @l = 6 by E-Minus {
                                                            @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1, x = 6 |- i evalto 1 / @l = 6 by E-Var {};
                                                            @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 1, x = 6 |- 1 evalto 1 / @l = 6 by E-Int {};
                                                            1 minus 1 is 0 by B-Minus {};
                                                        };
                                                        @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 0 |- if i < 1 then 0 else let x = f i in do f (i - 1) evalto 0 / @l = 6 by E-IfT {
                                                            @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 0 |- i < 1 evalto true / @l = 6 by E-Lt {
                                                                @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 0 |- i evalto 0 / @l = 6 by E-Var {};
                                                                @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 0 |- 1 evalto 1 / @l = 6 by E-Int {};
                                                                0 less than 1 is true by B-Lt {};
                                                            };
                                                            @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], f = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], i = 0 |- 0 evalto 0 / @l = 6 by E-Int {};
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, sum = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], y = 0 |- !x evalto 6 / @l = 6 by E-Deref {
                    @l = 6 / do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l, sum = (do = ()[rec do = fun f -> fun i -> if i < 1 then 0 else let x = f i in do f (i - 1)], x = @l)[fun i -> x := !x + i], y = 0 |- x evalto @l / @l = 6 by E-Var {};
                };
            };
        };
    };
};